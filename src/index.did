type Proposal = record {
  id : text;
  votes : vec Vote;
  userId : text;
  name : text;
  createdAt : nat64;
  description : text;
  noOfVotes : nat32;
};
type User = record {
  id : text;
  username : text;
  votes : vec Vote;
  recordingIds : vec text;
  createdAt : nat64;
  proposalIds : vec text;
};
type Vote = record {
  id : text;
  voteType : bool;
  createdAt : nat64;
  voterId : text;
  proposalId : text;
};
type _AzleResult = variant { Ok : Proposal; Err : text };
type _AzleResult_1 = variant { Ok : User; Err : text };
type _AzleResult_2 = variant { Ok : vec Proposal; Err : text };
type _AzleResult_3 = variant { Ok : vec User; Err : text };
type _AzleResult_4 = variant { Ok : vec Vote; Err : text };
service : () -> {
  createProposal : (text, text, text) -> (_AzleResult);
  createUser : (text) -> (_AzleResult_1);
  deleteUser : (text) -> (_AzleResult_1);
  getAllProposals : () -> (_AzleResult_2) query;
  getAllUsers : () -> (_AzleResult_3) query;
  getAllVotes : () -> (_AzleResult_4) query;
  getProposalById : (text) -> (opt Proposal) query;
  getVoteById : (text) -> (opt Vote) query;
  readUserById : (text) -> (opt User) query;
  viewProposalDetails : (text) -> (opt Proposal) query;
  voteProposal : (text, text, bool) -> (_AzleResult);
}